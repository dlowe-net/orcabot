(in-package #:orca)

(defmodule basic basic-module ("help" "man"))

(defmethod handle-command ((module basic-module) (cmd (eql 'help)) message args)
  (let* ((cmd-help
          '(("action" "<target> <action> - sends action to the channel or user")
            ("sayto" "<user> <action> - sends a private message to the user")
            ("join" "<channel> - make orca join a channel")
            ("part" "<channel> - make orca leave a channel")
            ("five" "<user> - make orca give the user a high five!")
            ("last" "<user> - see what the user was last seen doing")
            ("man" "<term> - look up term in unix manual")
            ("chant" "- set up a chant!")
            ("lolize" "<nick> - translate last said thing by <nick>")
            ("describe" "<term> - describe a term")
            ("remember" "<term> is <definition> - add a term")
            ("forget" "<term> - remove a term")
            ("no" "<term> is <definition> - change a term")
            ("bug" "<bug number> - show a link to the ITA bug")
            ("tix" "<tix number> - show a link to an ITA tix ticket")
            ("svn" "<revision number>/<path> - show a link to an ITA subversion revision")
            ("take" "<environment> [<activity>] - take control of pol7 or pol9")
            ("share" "<environment> [<activity>] - share pol7 or pol9 with someone else")
            ("release" "<environment> [<activity>] - stop using pol7 or pol9")
            ("update" "<environment> [<activity>] - set the activity of pol7 or pol9")))
         (help (assoc (first args) cmd-help :test #'string-equal)))
    (if help
        (irc:notice (connection message) (source message)
                    (format nil "~a ~a" (first help) (second help)))
        (irc:notice (connection message) (source message)
                    (format nil "Help is available for the following commands: ~{~a~^ ~}" (sort (mapcar #'first cmd-help) #'string<))))))

(defmethod handle-command ((module basic-module) (cmd (eql 'man)) message args)
  (let ((output (with-output-to-string (str)
                  (sb-ext:run-program "/usr/bin/whatis"
                                      (list (first args))
                                      :input nil :output str))))
    (if (search "nothing appropriate" output)
        (reply-to message "Nothing found for ~a" (first args))
        (ppcre:register-groups-bind (section desc)
            ((ppcre:create-scanner "^\\S+\\s+\\((\\d+)\\)\\s+- (.*)"
                                   :multi-line-mode t) output)
          (reply-to message "~a - ~a [http://linuxmanpages.com/man~a/~a.~a.php]"
                    (first args) desc section (first args) section)))))